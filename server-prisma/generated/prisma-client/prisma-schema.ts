// Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateAttribute {
  count: Int!
}

type AggregateAttributeValue {
  count: Int!
}

type AggregateAudit {
  count: Int!
}

type AggregateCategory {
  count: Int!
}

type AggregateCustomer {
  count: Int!
}

type AggregateDepartment {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateOrderDetail {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateProductAttribute {
  count: Int!
}

type AggregateProductCategory {
  count: Int!
}

type AggregateReview {
  count: Int!
}

type AggregateShipping {
  count: Int!
}

type AggregateShippingRegion {
  count: Int!
}

type AggregateShoppingCart {
  count: Int!
}

type AggregateTax {
  count: Int!
}

type Attribute {
  id: Int!
  name: String!
}

type AttributeConnection {
  pageInfo: PageInfo!
  edges: [AttributeEdge]!
  aggregate: AggregateAttribute!
}

input AttributeCreateInput {
  id: Int
  name: String!
}

input AttributeCreateOneInput {
  create: AttributeCreateInput
  connect: AttributeWhereUniqueInput
}

type AttributeEdge {
  node: Attribute!
  cursor: String!
}

enum AttributeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type AttributePreviousValues {
  id: Int!
  name: String!
}

type AttributeSubscriptionPayload {
  mutation: MutationType!
  node: Attribute
  updatedFields: [String!]
  previousValues: AttributePreviousValues
}

input AttributeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AttributeWhereInput
  AND: [AttributeSubscriptionWhereInput!]
  OR: [AttributeSubscriptionWhereInput!]
  NOT: [AttributeSubscriptionWhereInput!]
}

input AttributeUpdateDataInput {
  name: String
}

input AttributeUpdateInput {
  name: String
}

input AttributeUpdateManyMutationInput {
  name: String
}

input AttributeUpdateOneRequiredInput {
  create: AttributeCreateInput
  update: AttributeUpdateDataInput
  upsert: AttributeUpsertNestedInput
  connect: AttributeWhereUniqueInput
}

input AttributeUpsertNestedInput {
  update: AttributeUpdateDataInput!
  create: AttributeCreateInput!
}

type AttributeValue {
  id: Int!
  attribute: Attribute!
  value: String!
}

type AttributeValueConnection {
  pageInfo: PageInfo!
  edges: [AttributeValueEdge]!
  aggregate: AggregateAttributeValue!
}

input AttributeValueCreateInput {
  id: Int
  attribute: AttributeCreateOneInput!
  value: String!
}

input AttributeValueCreateOneInput {
  create: AttributeValueCreateInput
  connect: AttributeValueWhereUniqueInput
}

type AttributeValueEdge {
  node: AttributeValue!
  cursor: String!
}

enum AttributeValueOrderByInput {
  id_ASC
  id_DESC
  value_ASC
  value_DESC
}

type AttributeValuePreviousValues {
  id: Int!
  value: String!
}

type AttributeValueSubscriptionPayload {
  mutation: MutationType!
  node: AttributeValue
  updatedFields: [String!]
  previousValues: AttributeValuePreviousValues
}

input AttributeValueSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AttributeValueWhereInput
  AND: [AttributeValueSubscriptionWhereInput!]
  OR: [AttributeValueSubscriptionWhereInput!]
  NOT: [AttributeValueSubscriptionWhereInput!]
}

input AttributeValueUpdateDataInput {
  attribute: AttributeUpdateOneRequiredInput
  value: String
}

input AttributeValueUpdateInput {
  attribute: AttributeUpdateOneRequiredInput
  value: String
}

input AttributeValueUpdateManyMutationInput {
  value: String
}

input AttributeValueUpdateOneRequiredInput {
  create: AttributeValueCreateInput
  update: AttributeValueUpdateDataInput
  upsert: AttributeValueUpsertNestedInput
  connect: AttributeValueWhereUniqueInput
}

input AttributeValueUpsertNestedInput {
  update: AttributeValueUpdateDataInput!
  create: AttributeValueCreateInput!
}

input AttributeValueWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  attribute: AttributeWhereInput
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [AttributeValueWhereInput!]
  OR: [AttributeValueWhereInput!]
  NOT: [AttributeValueWhereInput!]
}

input AttributeValueWhereUniqueInput {
  id: Int
}

input AttributeWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [AttributeWhereInput!]
  OR: [AttributeWhereInput!]
  NOT: [AttributeWhereInput!]
}

input AttributeWhereUniqueInput {
  id: Int
}

type Audit {
  id: Int!
  order: Order!
  createdOn: String!
  message: String!
  code: Int!
}

type AuditConnection {
  pageInfo: PageInfo!
  edges: [AuditEdge]!
  aggregate: AggregateAudit!
}

input AuditCreateInput {
  id: Int
  order: OrderCreateOneInput!
  createdOn: String!
  message: String!
  code: Int!
}

type AuditEdge {
  node: Audit!
  cursor: String!
}

enum AuditOrderByInput {
  id_ASC
  id_DESC
  createdOn_ASC
  createdOn_DESC
  message_ASC
  message_DESC
  code_ASC
  code_DESC
}

type AuditPreviousValues {
  id: Int!
  createdOn: String!
  message: String!
  code: Int!
}

type AuditSubscriptionPayload {
  mutation: MutationType!
  node: Audit
  updatedFields: [String!]
  previousValues: AuditPreviousValues
}

input AuditSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AuditWhereInput
  AND: [AuditSubscriptionWhereInput!]
  OR: [AuditSubscriptionWhereInput!]
  NOT: [AuditSubscriptionWhereInput!]
}

input AuditUpdateInput {
  order: OrderUpdateOneRequiredInput
  createdOn: String
  message: String
  code: Int
}

input AuditUpdateManyMutationInput {
  createdOn: String
  message: String
  code: Int
}

input AuditWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  order: OrderWhereInput
  createdOn: String
  createdOn_not: String
  createdOn_in: [String!]
  createdOn_not_in: [String!]
  createdOn_lt: String
  createdOn_lte: String
  createdOn_gt: String
  createdOn_gte: String
  createdOn_contains: String
  createdOn_not_contains: String
  createdOn_starts_with: String
  createdOn_not_starts_with: String
  createdOn_ends_with: String
  createdOn_not_ends_with: String
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  code: Int
  code_not: Int
  code_in: [Int!]
  code_not_in: [Int!]
  code_lt: Int
  code_lte: Int
  code_gt: Int
  code_gte: Int
  AND: [AuditWhereInput!]
  OR: [AuditWhereInput!]
  NOT: [AuditWhereInput!]
}

input AuditWhereUniqueInput {
  id: Int
}

type BatchPayload {
  count: Long!
}

type Category {
  id: Int!
  department: Department!
  name: String!
  description: String
}

type CategoryConnection {
  pageInfo: PageInfo!
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  id: Int
  department: DepartmentCreateOneInput!
  name: String!
  description: String
}

input CategoryCreateOneInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

type CategoryEdge {
  node: Category!
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type CategoryPreviousValues {
  id: Int!
  name: String!
  description: String
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
  AND: [CategorySubscriptionWhereInput!]
  OR: [CategorySubscriptionWhereInput!]
  NOT: [CategorySubscriptionWhereInput!]
}

input CategoryUpdateDataInput {
  department: DepartmentUpdateOneRequiredInput
  name: String
  description: String
}

input CategoryUpdateInput {
  department: DepartmentUpdateOneRequiredInput
  name: String
  description: String
}

input CategoryUpdateManyMutationInput {
  name: String
  description: String
}

input CategoryUpdateOneRequiredInput {
  create: CategoryCreateInput
  update: CategoryUpdateDataInput
  upsert: CategoryUpsertNestedInput
  connect: CategoryWhereUniqueInput
}

input CategoryUpsertNestedInput {
  update: CategoryUpdateDataInput!
  create: CategoryCreateInput!
}

input CategoryWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  department: DepartmentWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
}

input CategoryWhereUniqueInput {
  id: Int
}

type Customer {
  id: Int!
  name: String!
  email: String!
  password: String!
  creditCard: String
  address1: String
  address2: String
  city: String
  region: String
  postalCode: String
  country: String
  shippingRegion: ShippingRegion!
  dayPhone: String
  evePhone: String
  mobPhone: String
}

type CustomerConnection {
  pageInfo: PageInfo!
  edges: [CustomerEdge]!
  aggregate: AggregateCustomer!
}

input CustomerCreateInput {
  id: Int
  name: String!
  email: String!
  password: String!
  creditCard: String
  address1: String
  address2: String
  city: String
  region: String
  postalCode: String
  country: String
  shippingRegion: ShippingRegionCreateOneInput!
  dayPhone: String
  evePhone: String
  mobPhone: String
}

input CustomerCreateOneInput {
  create: CustomerCreateInput
  connect: CustomerWhereUniqueInput
}

type CustomerEdge {
  node: Customer!
  cursor: String!
}

enum CustomerOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  creditCard_ASC
  creditCard_DESC
  address1_ASC
  address1_DESC
  address2_ASC
  address2_DESC
  city_ASC
  city_DESC
  region_ASC
  region_DESC
  postalCode_ASC
  postalCode_DESC
  country_ASC
  country_DESC
  dayPhone_ASC
  dayPhone_DESC
  evePhone_ASC
  evePhone_DESC
  mobPhone_ASC
  mobPhone_DESC
}

type CustomerPreviousValues {
  id: Int!
  name: String!
  email: String!
  password: String!
  creditCard: String
  address1: String
  address2: String
  city: String
  region: String
  postalCode: String
  country: String
  dayPhone: String
  evePhone: String
  mobPhone: String
}

type CustomerSubscriptionPayload {
  mutation: MutationType!
  node: Customer
  updatedFields: [String!]
  previousValues: CustomerPreviousValues
}

input CustomerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CustomerWhereInput
  AND: [CustomerSubscriptionWhereInput!]
  OR: [CustomerSubscriptionWhereInput!]
  NOT: [CustomerSubscriptionWhereInput!]
}

input CustomerUpdateDataInput {
  name: String
  email: String
  password: String
  creditCard: String
  address1: String
  address2: String
  city: String
  region: String
  postalCode: String
  country: String
  shippingRegion: ShippingRegionUpdateOneRequiredInput
  dayPhone: String
  evePhone: String
  mobPhone: String
}

input CustomerUpdateInput {
  name: String
  email: String
  password: String
  creditCard: String
  address1: String
  address2: String
  city: String
  region: String
  postalCode: String
  country: String
  shippingRegion: ShippingRegionUpdateOneRequiredInput
  dayPhone: String
  evePhone: String
  mobPhone: String
}

input CustomerUpdateManyMutationInput {
  name: String
  email: String
  password: String
  creditCard: String
  address1: String
  address2: String
  city: String
  region: String
  postalCode: String
  country: String
  dayPhone: String
  evePhone: String
  mobPhone: String
}

input CustomerUpdateOneInput {
  create: CustomerCreateInput
  update: CustomerUpdateDataInput
  upsert: CustomerUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CustomerWhereUniqueInput
}

input CustomerUpdateOneRequiredInput {
  create: CustomerCreateInput
  update: CustomerUpdateDataInput
  upsert: CustomerUpsertNestedInput
  connect: CustomerWhereUniqueInput
}

input CustomerUpsertNestedInput {
  update: CustomerUpdateDataInput!
  create: CustomerCreateInput!
}

input CustomerWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  creditCard: String
  creditCard_not: String
  creditCard_in: [String!]
  creditCard_not_in: [String!]
  creditCard_lt: String
  creditCard_lte: String
  creditCard_gt: String
  creditCard_gte: String
  creditCard_contains: String
  creditCard_not_contains: String
  creditCard_starts_with: String
  creditCard_not_starts_with: String
  creditCard_ends_with: String
  creditCard_not_ends_with: String
  address1: String
  address1_not: String
  address1_in: [String!]
  address1_not_in: [String!]
  address1_lt: String
  address1_lte: String
  address1_gt: String
  address1_gte: String
  address1_contains: String
  address1_not_contains: String
  address1_starts_with: String
  address1_not_starts_with: String
  address1_ends_with: String
  address1_not_ends_with: String
  address2: String
  address2_not: String
  address2_in: [String!]
  address2_not_in: [String!]
  address2_lt: String
  address2_lte: String
  address2_gt: String
  address2_gte: String
  address2_contains: String
  address2_not_contains: String
  address2_starts_with: String
  address2_not_starts_with: String
  address2_ends_with: String
  address2_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  region: String
  region_not: String
  region_in: [String!]
  region_not_in: [String!]
  region_lt: String
  region_lte: String
  region_gt: String
  region_gte: String
  region_contains: String
  region_not_contains: String
  region_starts_with: String
  region_not_starts_with: String
  region_ends_with: String
  region_not_ends_with: String
  postalCode: String
  postalCode_not: String
  postalCode_in: [String!]
  postalCode_not_in: [String!]
  postalCode_lt: String
  postalCode_lte: String
  postalCode_gt: String
  postalCode_gte: String
  postalCode_contains: String
  postalCode_not_contains: String
  postalCode_starts_with: String
  postalCode_not_starts_with: String
  postalCode_ends_with: String
  postalCode_not_ends_with: String
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  shippingRegion: ShippingRegionWhereInput
  dayPhone: String
  dayPhone_not: String
  dayPhone_in: [String!]
  dayPhone_not_in: [String!]
  dayPhone_lt: String
  dayPhone_lte: String
  dayPhone_gt: String
  dayPhone_gte: String
  dayPhone_contains: String
  dayPhone_not_contains: String
  dayPhone_starts_with: String
  dayPhone_not_starts_with: String
  dayPhone_ends_with: String
  dayPhone_not_ends_with: String
  evePhone: String
  evePhone_not: String
  evePhone_in: [String!]
  evePhone_not_in: [String!]
  evePhone_lt: String
  evePhone_lte: String
  evePhone_gt: String
  evePhone_gte: String
  evePhone_contains: String
  evePhone_not_contains: String
  evePhone_starts_with: String
  evePhone_not_starts_with: String
  evePhone_ends_with: String
  evePhone_not_ends_with: String
  mobPhone: String
  mobPhone_not: String
  mobPhone_in: [String!]
  mobPhone_not_in: [String!]
  mobPhone_lt: String
  mobPhone_lte: String
  mobPhone_gt: String
  mobPhone_gte: String
  mobPhone_contains: String
  mobPhone_not_contains: String
  mobPhone_starts_with: String
  mobPhone_not_starts_with: String
  mobPhone_ends_with: String
  mobPhone_not_ends_with: String
  AND: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  NOT: [CustomerWhereInput!]
}

input CustomerWhereUniqueInput {
  id: Int
}

type Department {
  id: Int!
  name: String!
  description: String
}

type DepartmentConnection {
  pageInfo: PageInfo!
  edges: [DepartmentEdge]!
  aggregate: AggregateDepartment!
}

input DepartmentCreateInput {
  id: Int
  name: String!
  description: String
}

input DepartmentCreateOneInput {
  create: DepartmentCreateInput
  connect: DepartmentWhereUniqueInput
}

type DepartmentEdge {
  node: Department!
  cursor: String!
}

enum DepartmentOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type DepartmentPreviousValues {
  id: Int!
  name: String!
  description: String
}

type DepartmentSubscriptionPayload {
  mutation: MutationType!
  node: Department
  updatedFields: [String!]
  previousValues: DepartmentPreviousValues
}

input DepartmentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DepartmentWhereInput
  AND: [DepartmentSubscriptionWhereInput!]
  OR: [DepartmentSubscriptionWhereInput!]
  NOT: [DepartmentSubscriptionWhereInput!]
}

input DepartmentUpdateDataInput {
  name: String
  description: String
}

input DepartmentUpdateInput {
  name: String
  description: String
}

input DepartmentUpdateManyMutationInput {
  name: String
  description: String
}

input DepartmentUpdateOneRequiredInput {
  create: DepartmentCreateInput
  update: DepartmentUpdateDataInput
  upsert: DepartmentUpsertNestedInput
  connect: DepartmentWhereUniqueInput
}

input DepartmentUpsertNestedInput {
  update: DepartmentUpdateDataInput!
  create: DepartmentCreateInput!
}

input DepartmentWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [DepartmentWhereInput!]
  OR: [DepartmentWhereInput!]
  NOT: [DepartmentWhereInput!]
}

input DepartmentWhereUniqueInput {
  id: Int
}

scalar Long

type Mutation {
  createAttribute(data: AttributeCreateInput!): Attribute!
  updateAttribute(data: AttributeUpdateInput!, where: AttributeWhereUniqueInput!): Attribute
  updateManyAttributes(data: AttributeUpdateManyMutationInput!, where: AttributeWhereInput): BatchPayload!
  upsertAttribute(where: AttributeWhereUniqueInput!, create: AttributeCreateInput!, update: AttributeUpdateInput!): Attribute!
  deleteAttribute(where: AttributeWhereUniqueInput!): Attribute
  deleteManyAttributes(where: AttributeWhereInput): BatchPayload!
  createAttributeValue(data: AttributeValueCreateInput!): AttributeValue!
  updateAttributeValue(data: AttributeValueUpdateInput!, where: AttributeValueWhereUniqueInput!): AttributeValue
  updateManyAttributeValues(data: AttributeValueUpdateManyMutationInput!, where: AttributeValueWhereInput): BatchPayload!
  upsertAttributeValue(where: AttributeValueWhereUniqueInput!, create: AttributeValueCreateInput!, update: AttributeValueUpdateInput!): AttributeValue!
  deleteAttributeValue(where: AttributeValueWhereUniqueInput!): AttributeValue
  deleteManyAttributeValues(where: AttributeValueWhereInput): BatchPayload!
  createAudit(data: AuditCreateInput!): Audit!
  updateAudit(data: AuditUpdateInput!, where: AuditWhereUniqueInput!): Audit
  updateManyAudits(data: AuditUpdateManyMutationInput!, where: AuditWhereInput): BatchPayload!
  upsertAudit(where: AuditWhereUniqueInput!, create: AuditCreateInput!, update: AuditUpdateInput!): Audit!
  deleteAudit(where: AuditWhereUniqueInput!): Audit
  deleteManyAudits(where: AuditWhereInput): BatchPayload!
  createCategory(data: CategoryCreateInput!): Category!
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  createCustomer(data: CustomerCreateInput!): Customer!
  updateCustomer(data: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer
  updateManyCustomers(data: CustomerUpdateManyMutationInput!, where: CustomerWhereInput): BatchPayload!
  upsertCustomer(where: CustomerWhereUniqueInput!, create: CustomerCreateInput!, update: CustomerUpdateInput!): Customer!
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer
  deleteManyCustomers(where: CustomerWhereInput): BatchPayload!
  createDepartment(data: DepartmentCreateInput!): Department!
  updateDepartment(data: DepartmentUpdateInput!, where: DepartmentWhereUniqueInput!): Department
  updateManyDepartments(data: DepartmentUpdateManyMutationInput!, where: DepartmentWhereInput): BatchPayload!
  upsertDepartment(where: DepartmentWhereUniqueInput!, create: DepartmentCreateInput!, update: DepartmentUpdateInput!): Department!
  deleteDepartment(where: DepartmentWhereUniqueInput!): Department
  deleteManyDepartments(where: DepartmentWhereInput): BatchPayload!
  createOrder(data: OrderCreateInput!): Order!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  createOrderDetail(data: OrderDetailCreateInput!): OrderDetail!
  updateOrderDetail(data: OrderDetailUpdateInput!, where: OrderDetailWhereUniqueInput!): OrderDetail
  updateManyOrderDetails(data: OrderDetailUpdateManyMutationInput!, where: OrderDetailWhereInput): BatchPayload!
  upsertOrderDetail(where: OrderDetailWhereUniqueInput!, create: OrderDetailCreateInput!, update: OrderDetailUpdateInput!): OrderDetail!
  deleteOrderDetail(where: OrderDetailWhereUniqueInput!): OrderDetail
  deleteManyOrderDetails(where: OrderDetailWhereInput): BatchPayload!
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createProductAttribute(data: ProductAttributeCreateInput!): ProductAttribute!
  updateProductAttribute(data: ProductAttributeUpdateInput!, where: ProductAttributeWhereUniqueInput!): ProductAttribute
  upsertProductAttribute(where: ProductAttributeWhereUniqueInput!, create: ProductAttributeCreateInput!, update: ProductAttributeUpdateInput!): ProductAttribute!
  deleteProductAttribute(where: ProductAttributeWhereUniqueInput!): ProductAttribute
  deleteManyProductAttributes(where: ProductAttributeWhereInput): BatchPayload!
  createProductCategory(data: ProductCategoryCreateInput!): ProductCategory!
  updateProductCategory(data: ProductCategoryUpdateInput!, where: ProductCategoryWhereUniqueInput!): ProductCategory
  upsertProductCategory(where: ProductCategoryWhereUniqueInput!, create: ProductCategoryCreateInput!, update: ProductCategoryUpdateInput!): ProductCategory!
  deleteProductCategory(where: ProductCategoryWhereUniqueInput!): ProductCategory
  deleteManyProductCategories(where: ProductCategoryWhereInput): BatchPayload!
  createReview(data: ReviewCreateInput!): Review!
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  updateManyReviews(data: ReviewUpdateManyMutationInput!, where: ReviewWhereInput): BatchPayload!
  upsertReview(where: ReviewWhereUniqueInput!, create: ReviewCreateInput!, update: ReviewUpdateInput!): Review!
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteManyReviews(where: ReviewWhereInput): BatchPayload!
  createShipping(data: ShippingCreateInput!): Shipping!
  updateShipping(data: ShippingUpdateInput!, where: ShippingWhereUniqueInput!): Shipping
  updateManyShippings(data: ShippingUpdateManyMutationInput!, where: ShippingWhereInput): BatchPayload!
  upsertShipping(where: ShippingWhereUniqueInput!, create: ShippingCreateInput!, update: ShippingUpdateInput!): Shipping!
  deleteShipping(where: ShippingWhereUniqueInput!): Shipping
  deleteManyShippings(where: ShippingWhereInput): BatchPayload!
  createShippingRegion(data: ShippingRegionCreateInput!): ShippingRegion!
  updateShippingRegion(data: ShippingRegionUpdateInput!, where: ShippingRegionWhereUniqueInput!): ShippingRegion
  updateManyShippingRegions(data: ShippingRegionUpdateManyMutationInput!, where: ShippingRegionWhereInput): BatchPayload!
  upsertShippingRegion(where: ShippingRegionWhereUniqueInput!, create: ShippingRegionCreateInput!, update: ShippingRegionUpdateInput!): ShippingRegion!
  deleteShippingRegion(where: ShippingRegionWhereUniqueInput!): ShippingRegion
  deleteManyShippingRegions(where: ShippingRegionWhereInput): BatchPayload!
  createShoppingCart(data: ShoppingCartCreateInput!): ShoppingCart!
  updateShoppingCart(data: ShoppingCartUpdateInput!, where: ShoppingCartWhereUniqueInput!): ShoppingCart
  updateManyShoppingCarts(data: ShoppingCartUpdateManyMutationInput!, where: ShoppingCartWhereInput): BatchPayload!
  upsertShoppingCart(where: ShoppingCartWhereUniqueInput!, create: ShoppingCartCreateInput!, update: ShoppingCartUpdateInput!): ShoppingCart!
  deleteShoppingCart(where: ShoppingCartWhereUniqueInput!): ShoppingCart
  deleteManyShoppingCarts(where: ShoppingCartWhereInput): BatchPayload!
  createTax(data: TaxCreateInput!): Tax!
  updateTax(data: TaxUpdateInput!, where: TaxWhereUniqueInput!): Tax
  updateManyTaxes(data: TaxUpdateManyMutationInput!, where: TaxWhereInput): BatchPayload!
  upsertTax(where: TaxWhereUniqueInput!, create: TaxCreateInput!, update: TaxUpdateInput!): Tax!
  deleteTax(where: TaxWhereUniqueInput!): Tax
  deleteManyTaxes(where: TaxWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Order {
  id: Int!
  totalAmount: Float!
  createdOn: String!
  shippedOn: String!
  status: Int!
  comments: String
  customer: Customer
  authCode: String
  reference: String
  shipping: Shipping
  tax: Tax
}

type OrderConnection {
  pageInfo: PageInfo!
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  id: Int
  totalAmount: Float!
  createdOn: String!
  shippedOn: String!
  status: Int!
  comments: String
  customer: CustomerCreateOneInput
  authCode: String
  reference: String
  shipping: ShippingCreateOneInput
  tax: TaxCreateOneInput
}

input OrderCreateOneInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
}

type OrderDetail {
  id: Int!
  order: Order!
  product: Product!
  attributes: String!
  productName: String!
  quantity: Int!
  unitCost: Float!
}

type OrderDetailConnection {
  pageInfo: PageInfo!
  edges: [OrderDetailEdge]!
  aggregate: AggregateOrderDetail!
}

input OrderDetailCreateInput {
  id: Int
  order: OrderCreateOneInput!
  product: ProductCreateOneInput!
  attributes: String!
  productName: String!
  quantity: Int!
  unitCost: Float!
}

type OrderDetailEdge {
  node: OrderDetail!
  cursor: String!
}

enum OrderDetailOrderByInput {
  id_ASC
  id_DESC
  attributes_ASC
  attributes_DESC
  productName_ASC
  productName_DESC
  quantity_ASC
  quantity_DESC
  unitCost_ASC
  unitCost_DESC
}

type OrderDetailPreviousValues {
  id: Int!
  attributes: String!
  productName: String!
  quantity: Int!
  unitCost: Float!
}

type OrderDetailSubscriptionPayload {
  mutation: MutationType!
  node: OrderDetail
  updatedFields: [String!]
  previousValues: OrderDetailPreviousValues
}

input OrderDetailSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderDetailWhereInput
  AND: [OrderDetailSubscriptionWhereInput!]
  OR: [OrderDetailSubscriptionWhereInput!]
  NOT: [OrderDetailSubscriptionWhereInput!]
}

input OrderDetailUpdateInput {
  order: OrderUpdateOneRequiredInput
  product: ProductUpdateOneRequiredInput
  attributes: String
  productName: String
  quantity: Int
  unitCost: Float
}

input OrderDetailUpdateManyMutationInput {
  attributes: String
  productName: String
  quantity: Int
  unitCost: Float
}

input OrderDetailWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  order: OrderWhereInput
  product: ProductWhereInput
  attributes: String
  attributes_not: String
  attributes_in: [String!]
  attributes_not_in: [String!]
  attributes_lt: String
  attributes_lte: String
  attributes_gt: String
  attributes_gte: String
  attributes_contains: String
  attributes_not_contains: String
  attributes_starts_with: String
  attributes_not_starts_with: String
  attributes_ends_with: String
  attributes_not_ends_with: String
  productName: String
  productName_not: String
  productName_in: [String!]
  productName_not_in: [String!]
  productName_lt: String
  productName_lte: String
  productName_gt: String
  productName_gte: String
  productName_contains: String
  productName_not_contains: String
  productName_starts_with: String
  productName_not_starts_with: String
  productName_ends_with: String
  productName_not_ends_with: String
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  unitCost: Float
  unitCost_not: Float
  unitCost_in: [Float!]
  unitCost_not_in: [Float!]
  unitCost_lt: Float
  unitCost_lte: Float
  unitCost_gt: Float
  unitCost_gte: Float
  AND: [OrderDetailWhereInput!]
  OR: [OrderDetailWhereInput!]
  NOT: [OrderDetailWhereInput!]
}

input OrderDetailWhereUniqueInput {
  id: Int
}

type OrderEdge {
  node: Order!
  cursor: String!
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  totalAmount_ASC
  totalAmount_DESC
  createdOn_ASC
  createdOn_DESC
  shippedOn_ASC
  shippedOn_DESC
  status_ASC
  status_DESC
  comments_ASC
  comments_DESC
  authCode_ASC
  authCode_DESC
  reference_ASC
  reference_DESC
}

type OrderPreviousValues {
  id: Int!
  totalAmount: Float!
  createdOn: String!
  shippedOn: String!
  status: Int!
  comments: String
  authCode: String
  reference: String
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
  AND: [OrderSubscriptionWhereInput!]
  OR: [OrderSubscriptionWhereInput!]
  NOT: [OrderSubscriptionWhereInput!]
}

input OrderUpdateDataInput {
  totalAmount: Float
  createdOn: String
  shippedOn: String
  status: Int
  comments: String
  customer: CustomerUpdateOneInput
  authCode: String
  reference: String
  shipping: ShippingUpdateOneInput
  tax: TaxUpdateOneInput
}

input OrderUpdateInput {
  totalAmount: Float
  createdOn: String
  shippedOn: String
  status: Int
  comments: String
  customer: CustomerUpdateOneInput
  authCode: String
  reference: String
  shipping: ShippingUpdateOneInput
  tax: TaxUpdateOneInput
}

input OrderUpdateManyMutationInput {
  totalAmount: Float
  createdOn: String
  shippedOn: String
  status: Int
  comments: String
  authCode: String
  reference: String
}

input OrderUpdateOneRequiredInput {
  create: OrderCreateInput
  update: OrderUpdateDataInput
  upsert: OrderUpsertNestedInput
  connect: OrderWhereUniqueInput
}

input OrderUpsertNestedInput {
  update: OrderUpdateDataInput!
  create: OrderCreateInput!
}

input OrderWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  totalAmount: Float
  totalAmount_not: Float
  totalAmount_in: [Float!]
  totalAmount_not_in: [Float!]
  totalAmount_lt: Float
  totalAmount_lte: Float
  totalAmount_gt: Float
  totalAmount_gte: Float
  createdOn: String
  createdOn_not: String
  createdOn_in: [String!]
  createdOn_not_in: [String!]
  createdOn_lt: String
  createdOn_lte: String
  createdOn_gt: String
  createdOn_gte: String
  createdOn_contains: String
  createdOn_not_contains: String
  createdOn_starts_with: String
  createdOn_not_starts_with: String
  createdOn_ends_with: String
  createdOn_not_ends_with: String
  shippedOn: String
  shippedOn_not: String
  shippedOn_in: [String!]
  shippedOn_not_in: [String!]
  shippedOn_lt: String
  shippedOn_lte: String
  shippedOn_gt: String
  shippedOn_gte: String
  shippedOn_contains: String
  shippedOn_not_contains: String
  shippedOn_starts_with: String
  shippedOn_not_starts_with: String
  shippedOn_ends_with: String
  shippedOn_not_ends_with: String
  status: Int
  status_not: Int
  status_in: [Int!]
  status_not_in: [Int!]
  status_lt: Int
  status_lte: Int
  status_gt: Int
  status_gte: Int
  comments: String
  comments_not: String
  comments_in: [String!]
  comments_not_in: [String!]
  comments_lt: String
  comments_lte: String
  comments_gt: String
  comments_gte: String
  comments_contains: String
  comments_not_contains: String
  comments_starts_with: String
  comments_not_starts_with: String
  comments_ends_with: String
  comments_not_ends_with: String
  customer: CustomerWhereInput
  authCode: String
  authCode_not: String
  authCode_in: [String!]
  authCode_not_in: [String!]
  authCode_lt: String
  authCode_lte: String
  authCode_gt: String
  authCode_gte: String
  authCode_contains: String
  authCode_not_contains: String
  authCode_starts_with: String
  authCode_not_starts_with: String
  authCode_ends_with: String
  authCode_not_ends_with: String
  reference: String
  reference_not: String
  reference_in: [String!]
  reference_not_in: [String!]
  reference_lt: String
  reference_lte: String
  reference_gt: String
  reference_gte: String
  reference_contains: String
  reference_not_contains: String
  reference_starts_with: String
  reference_not_starts_with: String
  reference_ends_with: String
  reference_not_ends_with: String
  shipping: ShippingWhereInput
  tax: TaxWhereInput
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
}

input OrderWhereUniqueInput {
  id: Int
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Product {
  id: Int!
  name: String!
  description: String!
  price: Float!
  discountedPrice: Float!
  image: String
  image2: String
  thumbnail: String
  display: Int!
}

type ProductAttribute {
  id: Int!
  product: Product!
  attributeValue: AttributeValue!
}

type ProductAttributeConnection {
  pageInfo: PageInfo!
  edges: [ProductAttributeEdge]!
  aggregate: AggregateProductAttribute!
}

input ProductAttributeCreateInput {
  id: Int
  product: ProductCreateOneInput!
  attributeValue: AttributeValueCreateOneInput!
}

type ProductAttributeEdge {
  node: ProductAttribute!
  cursor: String!
}

enum ProductAttributeOrderByInput {
  id_ASC
  id_DESC
}

type ProductAttributePreviousValues {
  id: Int!
}

type ProductAttributeSubscriptionPayload {
  mutation: MutationType!
  node: ProductAttribute
  updatedFields: [String!]
  previousValues: ProductAttributePreviousValues
}

input ProductAttributeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductAttributeWhereInput
  AND: [ProductAttributeSubscriptionWhereInput!]
  OR: [ProductAttributeSubscriptionWhereInput!]
  NOT: [ProductAttributeSubscriptionWhereInput!]
}

input ProductAttributeUpdateInput {
  product: ProductUpdateOneRequiredInput
  attributeValue: AttributeValueUpdateOneRequiredInput
}

input ProductAttributeWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  product: ProductWhereInput
  attributeValue: AttributeValueWhereInput
  AND: [ProductAttributeWhereInput!]
  OR: [ProductAttributeWhereInput!]
  NOT: [ProductAttributeWhereInput!]
}

input ProductAttributeWhereUniqueInput {
  id: Int
}

type ProductCategory {
  id: Int!
  product: Product!
  category: Category!
}

type ProductCategoryConnection {
  pageInfo: PageInfo!
  edges: [ProductCategoryEdge]!
  aggregate: AggregateProductCategory!
}

input ProductCategoryCreateInput {
  id: Int
  product: ProductCreateOneInput!
  category: CategoryCreateOneInput!
}

type ProductCategoryEdge {
  node: ProductCategory!
  cursor: String!
}

enum ProductCategoryOrderByInput {
  id_ASC
  id_DESC
}

type ProductCategoryPreviousValues {
  id: Int!
}

type ProductCategorySubscriptionPayload {
  mutation: MutationType!
  node: ProductCategory
  updatedFields: [String!]
  previousValues: ProductCategoryPreviousValues
}

input ProductCategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductCategoryWhereInput
  AND: [ProductCategorySubscriptionWhereInput!]
  OR: [ProductCategorySubscriptionWhereInput!]
  NOT: [ProductCategorySubscriptionWhereInput!]
}

input ProductCategoryUpdateInput {
  product: ProductUpdateOneRequiredInput
  category: CategoryUpdateOneRequiredInput
}

input ProductCategoryWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  product: ProductWhereInput
  category: CategoryWhereInput
  AND: [ProductCategoryWhereInput!]
  OR: [ProductCategoryWhereInput!]
  NOT: [ProductCategoryWhereInput!]
}

input ProductCategoryWhereUniqueInput {
  id: Int
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  id: Int
  name: String!
  description: String!
  price: Float!
  discountedPrice: Float!
  image: String
  image2: String
  thumbnail: String
  display: Int!
}

input ProductCreateOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

type ProductEdge {
  node: Product!
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  price_ASC
  price_DESC
  discountedPrice_ASC
  discountedPrice_DESC
  image_ASC
  image_DESC
  image2_ASC
  image2_DESC
  thumbnail_ASC
  thumbnail_DESC
  display_ASC
  display_DESC
}

type ProductPreviousValues {
  id: Int!
  name: String!
  description: String!
  price: Float!
  discountedPrice: Float!
  image: String
  image2: String
  thumbnail: String
  display: Int!
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  NOT: [ProductSubscriptionWhereInput!]
}

input ProductUpdateDataInput {
  name: String
  description: String
  price: Float
  discountedPrice: Float
  image: String
  image2: String
  thumbnail: String
  display: Int
}

input ProductUpdateInput {
  name: String
  description: String
  price: Float
  discountedPrice: Float
  image: String
  image2: String
  thumbnail: String
  display: Int
}

input ProductUpdateManyMutationInput {
  name: String
  description: String
  price: Float
  discountedPrice: Float
  image: String
  image2: String
  thumbnail: String
  display: Int
}

input ProductUpdateOneRequiredInput {
  create: ProductCreateInput
  update: ProductUpdateDataInput
  upsert: ProductUpsertNestedInput
  connect: ProductWhereUniqueInput
}

input ProductUpsertNestedInput {
  update: ProductUpdateDataInput!
  create: ProductCreateInput!
}

input ProductWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  discountedPrice: Float
  discountedPrice_not: Float
  discountedPrice_in: [Float!]
  discountedPrice_not_in: [Float!]
  discountedPrice_lt: Float
  discountedPrice_lte: Float
  discountedPrice_gt: Float
  discountedPrice_gte: Float
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  image2: String
  image2_not: String
  image2_in: [String!]
  image2_not_in: [String!]
  image2_lt: String
  image2_lte: String
  image2_gt: String
  image2_gte: String
  image2_contains: String
  image2_not_contains: String
  image2_starts_with: String
  image2_not_starts_with: String
  image2_ends_with: String
  image2_not_ends_with: String
  thumbnail: String
  thumbnail_not: String
  thumbnail_in: [String!]
  thumbnail_not_in: [String!]
  thumbnail_lt: String
  thumbnail_lte: String
  thumbnail_gt: String
  thumbnail_gte: String
  thumbnail_contains: String
  thumbnail_not_contains: String
  thumbnail_starts_with: String
  thumbnail_not_starts_with: String
  thumbnail_ends_with: String
  thumbnail_not_ends_with: String
  display: Int
  display_not: Int
  display_in: [Int!]
  display_not_in: [Int!]
  display_lt: Int
  display_lte: Int
  display_gt: Int
  display_gte: Int
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
  id: Int
}

type Query {
  attribute(where: AttributeWhereUniqueInput!): Attribute
  attributes(where: AttributeWhereInput, orderBy: AttributeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Attribute]!
  attributesConnection(where: AttributeWhereInput, orderBy: AttributeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AttributeConnection!
  attributeValue(where: AttributeValueWhereUniqueInput!): AttributeValue
  attributeValues(where: AttributeValueWhereInput, orderBy: AttributeValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AttributeValue]!
  attributeValuesConnection(where: AttributeValueWhereInput, orderBy: AttributeValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AttributeValueConnection!
  audit(where: AuditWhereUniqueInput!): Audit
  audits(where: AuditWhereInput, orderBy: AuditOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Audit]!
  auditsConnection(where: AuditWhereInput, orderBy: AuditOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuditConnection!
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  customer(where: CustomerWhereUniqueInput!): Customer
  customers(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Customer]!
  customersConnection(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CustomerConnection!
  department(where: DepartmentWhereUniqueInput!): Department
  departments(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Department]!
  departmentsConnection(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DepartmentConnection!
  order(where: OrderWhereUniqueInput!): Order
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  orderDetail(where: OrderDetailWhereUniqueInput!): OrderDetail
  orderDetails(where: OrderDetailWhereInput, orderBy: OrderDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderDetail]!
  orderDetailsConnection(where: OrderDetailWhereInput, orderBy: OrderDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderDetailConnection!
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  productAttribute(where: ProductAttributeWhereUniqueInput!): ProductAttribute
  productAttributes(where: ProductAttributeWhereInput, orderBy: ProductAttributeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductAttribute]!
  productAttributesConnection(where: ProductAttributeWhereInput, orderBy: ProductAttributeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductAttributeConnection!
  productCategory(where: ProductCategoryWhereUniqueInput!): ProductCategory
  productCategories(where: ProductCategoryWhereInput, orderBy: ProductCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductCategory]!
  productCategoriesConnection(where: ProductCategoryWhereInput, orderBy: ProductCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductCategoryConnection!
  review(where: ReviewWhereUniqueInput!): Review
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review]!
  reviewsConnection(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReviewConnection!
  shipping(where: ShippingWhereUniqueInput!): Shipping
  shippings(where: ShippingWhereInput, orderBy: ShippingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shipping]!
  shippingsConnection(where: ShippingWhereInput, orderBy: ShippingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShippingConnection!
  shippingRegion(where: ShippingRegionWhereUniqueInput!): ShippingRegion
  shippingRegions(where: ShippingRegionWhereInput, orderBy: ShippingRegionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ShippingRegion]!
  shippingRegionsConnection(where: ShippingRegionWhereInput, orderBy: ShippingRegionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShippingRegionConnection!
  shoppingCart(where: ShoppingCartWhereUniqueInput!): ShoppingCart
  shoppingCarts(where: ShoppingCartWhereInput, orderBy: ShoppingCartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ShoppingCart]!
  shoppingCartsConnection(where: ShoppingCartWhereInput, orderBy: ShoppingCartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShoppingCartConnection!
  tax(where: TaxWhereUniqueInput!): Tax
  taxes(where: TaxWhereInput, orderBy: TaxOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tax]!
  taxesConnection(where: TaxWhereInput, orderBy: TaxOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TaxConnection!
  node(id: ID!): Node
}

type Review {
  id: Int!
  customer: Customer!
  product: Product!
  review: String!
  rating: Int!
  created_On: String!
}

type ReviewConnection {
  pageInfo: PageInfo!
  edges: [ReviewEdge]!
  aggregate: AggregateReview!
}

input ReviewCreateInput {
  id: Int
  customer: CustomerCreateOneInput!
  product: ProductCreateOneInput!
  review: String!
  rating: Int!
  created_On: String!
}

type ReviewEdge {
  node: Review!
  cursor: String!
}

enum ReviewOrderByInput {
  id_ASC
  id_DESC
  review_ASC
  review_DESC
  rating_ASC
  rating_DESC
  created_On_ASC
  created_On_DESC
}

type ReviewPreviousValues {
  id: Int!
  review: String!
  rating: Int!
  created_On: String!
}

type ReviewSubscriptionPayload {
  mutation: MutationType!
  node: Review
  updatedFields: [String!]
  previousValues: ReviewPreviousValues
}

input ReviewSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReviewWhereInput
  AND: [ReviewSubscriptionWhereInput!]
  OR: [ReviewSubscriptionWhereInput!]
  NOT: [ReviewSubscriptionWhereInput!]
}

input ReviewUpdateInput {
  customer: CustomerUpdateOneRequiredInput
  product: ProductUpdateOneRequiredInput
  review: String
  rating: Int
  created_On: String
}

input ReviewUpdateManyMutationInput {
  review: String
  rating: Int
  created_On: String
}

input ReviewWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  customer: CustomerWhereInput
  product: ProductWhereInput
  review: String
  review_not: String
  review_in: [String!]
  review_not_in: [String!]
  review_lt: String
  review_lte: String
  review_gt: String
  review_gte: String
  review_contains: String
  review_not_contains: String
  review_starts_with: String
  review_not_starts_with: String
  review_ends_with: String
  review_not_ends_with: String
  rating: Int
  rating_not: Int
  rating_in: [Int!]
  rating_not_in: [Int!]
  rating_lt: Int
  rating_lte: Int
  rating_gt: Int
  rating_gte: Int
  created_On: String
  created_On_not: String
  created_On_in: [String!]
  created_On_not_in: [String!]
  created_On_lt: String
  created_On_lte: String
  created_On_gt: String
  created_On_gte: String
  created_On_contains: String
  created_On_not_contains: String
  created_On_starts_with: String
  created_On_not_starts_with: String
  created_On_ends_with: String
  created_On_not_ends_with: String
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
}

input ReviewWhereUniqueInput {
  id: Int
}

type Shipping {
  id: Int!
  shippingType: String!
  shippingCost: Float!
  shippingRegion: ShippingRegion!
}

type ShippingConnection {
  pageInfo: PageInfo!
  edges: [ShippingEdge]!
  aggregate: AggregateShipping!
}

input ShippingCreateInput {
  id: Int
  shippingType: String!
  shippingCost: Float!
  shippingRegion: ShippingRegionCreateOneInput!
}

input ShippingCreateOneInput {
  create: ShippingCreateInput
  connect: ShippingWhereUniqueInput
}

type ShippingEdge {
  node: Shipping!
  cursor: String!
}

enum ShippingOrderByInput {
  id_ASC
  id_DESC
  shippingType_ASC
  shippingType_DESC
  shippingCost_ASC
  shippingCost_DESC
}

type ShippingPreviousValues {
  id: Int!
  shippingType: String!
  shippingCost: Float!
}

type ShippingRegion {
  id: Int!
  shippingRegion: String!
}

type ShippingRegionConnection {
  pageInfo: PageInfo!
  edges: [ShippingRegionEdge]!
  aggregate: AggregateShippingRegion!
}

input ShippingRegionCreateInput {
  id: Int
  shippingRegion: String!
}

input ShippingRegionCreateOneInput {
  create: ShippingRegionCreateInput
  connect: ShippingRegionWhereUniqueInput
}

type ShippingRegionEdge {
  node: ShippingRegion!
  cursor: String!
}

enum ShippingRegionOrderByInput {
  id_ASC
  id_DESC
  shippingRegion_ASC
  shippingRegion_DESC
}

type ShippingRegionPreviousValues {
  id: Int!
  shippingRegion: String!
}

type ShippingRegionSubscriptionPayload {
  mutation: MutationType!
  node: ShippingRegion
  updatedFields: [String!]
  previousValues: ShippingRegionPreviousValues
}

input ShippingRegionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ShippingRegionWhereInput
  AND: [ShippingRegionSubscriptionWhereInput!]
  OR: [ShippingRegionSubscriptionWhereInput!]
  NOT: [ShippingRegionSubscriptionWhereInput!]
}

input ShippingRegionUpdateDataInput {
  shippingRegion: String
}

input ShippingRegionUpdateInput {
  shippingRegion: String
}

input ShippingRegionUpdateManyMutationInput {
  shippingRegion: String
}

input ShippingRegionUpdateOneRequiredInput {
  create: ShippingRegionCreateInput
  update: ShippingRegionUpdateDataInput
  upsert: ShippingRegionUpsertNestedInput
  connect: ShippingRegionWhereUniqueInput
}

input ShippingRegionUpsertNestedInput {
  update: ShippingRegionUpdateDataInput!
  create: ShippingRegionCreateInput!
}

input ShippingRegionWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  shippingRegion: String
  shippingRegion_not: String
  shippingRegion_in: [String!]
  shippingRegion_not_in: [String!]
  shippingRegion_lt: String
  shippingRegion_lte: String
  shippingRegion_gt: String
  shippingRegion_gte: String
  shippingRegion_contains: String
  shippingRegion_not_contains: String
  shippingRegion_starts_with: String
  shippingRegion_not_starts_with: String
  shippingRegion_ends_with: String
  shippingRegion_not_ends_with: String
  AND: [ShippingRegionWhereInput!]
  OR: [ShippingRegionWhereInput!]
  NOT: [ShippingRegionWhereInput!]
}

input ShippingRegionWhereUniqueInput {
  id: Int
}

type ShippingSubscriptionPayload {
  mutation: MutationType!
  node: Shipping
  updatedFields: [String!]
  previousValues: ShippingPreviousValues
}

input ShippingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ShippingWhereInput
  AND: [ShippingSubscriptionWhereInput!]
  OR: [ShippingSubscriptionWhereInput!]
  NOT: [ShippingSubscriptionWhereInput!]
}

input ShippingUpdateDataInput {
  shippingType: String
  shippingCost: Float
  shippingRegion: ShippingRegionUpdateOneRequiredInput
}

input ShippingUpdateInput {
  shippingType: String
  shippingCost: Float
  shippingRegion: ShippingRegionUpdateOneRequiredInput
}

input ShippingUpdateManyMutationInput {
  shippingType: String
  shippingCost: Float
}

input ShippingUpdateOneInput {
  create: ShippingCreateInput
  update: ShippingUpdateDataInput
  upsert: ShippingUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ShippingWhereUniqueInput
}

input ShippingUpsertNestedInput {
  update: ShippingUpdateDataInput!
  create: ShippingCreateInput!
}

input ShippingWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  shippingType: String
  shippingType_not: String
  shippingType_in: [String!]
  shippingType_not_in: [String!]
  shippingType_lt: String
  shippingType_lte: String
  shippingType_gt: String
  shippingType_gte: String
  shippingType_contains: String
  shippingType_not_contains: String
  shippingType_starts_with: String
  shippingType_not_starts_with: String
  shippingType_ends_with: String
  shippingType_not_ends_with: String
  shippingCost: Float
  shippingCost_not: Float
  shippingCost_in: [Float!]
  shippingCost_not_in: [Float!]
  shippingCost_lt: Float
  shippingCost_lte: Float
  shippingCost_gt: Float
  shippingCost_gte: Float
  shippingRegion: ShippingRegionWhereInput
  AND: [ShippingWhereInput!]
  OR: [ShippingWhereInput!]
  NOT: [ShippingWhereInput!]
}

input ShippingWhereUniqueInput {
  id: Int
}

type ShoppingCart {
  id: Int!
  cartId: String!
  product: Product!
  attributes: String!
  quantity: Int!
  buyNow: Boolean!
  addedOn: String!
}

type ShoppingCartConnection {
  pageInfo: PageInfo!
  edges: [ShoppingCartEdge]!
  aggregate: AggregateShoppingCart!
}

input ShoppingCartCreateInput {
  id: Int
  cartId: String!
  product: ProductCreateOneInput!
  attributes: String!
  quantity: Int!
  buyNow: Boolean!
  addedOn: String!
}

type ShoppingCartEdge {
  node: ShoppingCart!
  cursor: String!
}

enum ShoppingCartOrderByInput {
  id_ASC
  id_DESC
  cartId_ASC
  cartId_DESC
  attributes_ASC
  attributes_DESC
  quantity_ASC
  quantity_DESC
  buyNow_ASC
  buyNow_DESC
  addedOn_ASC
  addedOn_DESC
}

type ShoppingCartPreviousValues {
  id: Int!
  cartId: String!
  attributes: String!
  quantity: Int!
  buyNow: Boolean!
  addedOn: String!
}

type ShoppingCartSubscriptionPayload {
  mutation: MutationType!
  node: ShoppingCart
  updatedFields: [String!]
  previousValues: ShoppingCartPreviousValues
}

input ShoppingCartSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ShoppingCartWhereInput
  AND: [ShoppingCartSubscriptionWhereInput!]
  OR: [ShoppingCartSubscriptionWhereInput!]
  NOT: [ShoppingCartSubscriptionWhereInput!]
}

input ShoppingCartUpdateInput {
  cartId: String
  product: ProductUpdateOneRequiredInput
  attributes: String
  quantity: Int
  buyNow: Boolean
  addedOn: String
}

input ShoppingCartUpdateManyMutationInput {
  cartId: String
  attributes: String
  quantity: Int
  buyNow: Boolean
  addedOn: String
}

input ShoppingCartWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  cartId: String
  cartId_not: String
  cartId_in: [String!]
  cartId_not_in: [String!]
  cartId_lt: String
  cartId_lte: String
  cartId_gt: String
  cartId_gte: String
  cartId_contains: String
  cartId_not_contains: String
  cartId_starts_with: String
  cartId_not_starts_with: String
  cartId_ends_with: String
  cartId_not_ends_with: String
  product: ProductWhereInput
  attributes: String
  attributes_not: String
  attributes_in: [String!]
  attributes_not_in: [String!]
  attributes_lt: String
  attributes_lte: String
  attributes_gt: String
  attributes_gte: String
  attributes_contains: String
  attributes_not_contains: String
  attributes_starts_with: String
  attributes_not_starts_with: String
  attributes_ends_with: String
  attributes_not_ends_with: String
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  buyNow: Boolean
  buyNow_not: Boolean
  addedOn: String
  addedOn_not: String
  addedOn_in: [String!]
  addedOn_not_in: [String!]
  addedOn_lt: String
  addedOn_lte: String
  addedOn_gt: String
  addedOn_gte: String
  addedOn_contains: String
  addedOn_not_contains: String
  addedOn_starts_with: String
  addedOn_not_starts_with: String
  addedOn_ends_with: String
  addedOn_not_ends_with: String
  AND: [ShoppingCartWhereInput!]
  OR: [ShoppingCartWhereInput!]
  NOT: [ShoppingCartWhereInput!]
}

input ShoppingCartWhereUniqueInput {
  id: Int
}

type Subscription {
  attribute(where: AttributeSubscriptionWhereInput): AttributeSubscriptionPayload
  attributeValue(where: AttributeValueSubscriptionWhereInput): AttributeValueSubscriptionPayload
  audit(where: AuditSubscriptionWhereInput): AuditSubscriptionPayload
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  customer(where: CustomerSubscriptionWhereInput): CustomerSubscriptionPayload
  department(where: DepartmentSubscriptionWhereInput): DepartmentSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  orderDetail(where: OrderDetailSubscriptionWhereInput): OrderDetailSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  productAttribute(where: ProductAttributeSubscriptionWhereInput): ProductAttributeSubscriptionPayload
  productCategory(where: ProductCategorySubscriptionWhereInput): ProductCategorySubscriptionPayload
  review(where: ReviewSubscriptionWhereInput): ReviewSubscriptionPayload
  shipping(where: ShippingSubscriptionWhereInput): ShippingSubscriptionPayload
  shippingRegion(where: ShippingRegionSubscriptionWhereInput): ShippingRegionSubscriptionPayload
  shoppingCart(where: ShoppingCartSubscriptionWhereInput): ShoppingCartSubscriptionPayload
  tax(where: TaxSubscriptionWhereInput): TaxSubscriptionPayload
}

type Tax {
  id: Int!
  taxType: String!
  taxPercentage: Float!
}

type TaxConnection {
  pageInfo: PageInfo!
  edges: [TaxEdge]!
  aggregate: AggregateTax!
}

input TaxCreateInput {
  id: Int
  taxType: String!
  taxPercentage: Float!
}

input TaxCreateOneInput {
  create: TaxCreateInput
  connect: TaxWhereUniqueInput
}

type TaxEdge {
  node: Tax!
  cursor: String!
}

enum TaxOrderByInput {
  id_ASC
  id_DESC
  taxType_ASC
  taxType_DESC
  taxPercentage_ASC
  taxPercentage_DESC
}

type TaxPreviousValues {
  id: Int!
  taxType: String!
  taxPercentage: Float!
}

type TaxSubscriptionPayload {
  mutation: MutationType!
  node: Tax
  updatedFields: [String!]
  previousValues: TaxPreviousValues
}

input TaxSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TaxWhereInput
  AND: [TaxSubscriptionWhereInput!]
  OR: [TaxSubscriptionWhereInput!]
  NOT: [TaxSubscriptionWhereInput!]
}

input TaxUpdateDataInput {
  taxType: String
  taxPercentage: Float
}

input TaxUpdateInput {
  taxType: String
  taxPercentage: Float
}

input TaxUpdateManyMutationInput {
  taxType: String
  taxPercentage: Float
}

input TaxUpdateOneInput {
  create: TaxCreateInput
  update: TaxUpdateDataInput
  upsert: TaxUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: TaxWhereUniqueInput
}

input TaxUpsertNestedInput {
  update: TaxUpdateDataInput!
  create: TaxCreateInput!
}

input TaxWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  taxType: String
  taxType_not: String
  taxType_in: [String!]
  taxType_not_in: [String!]
  taxType_lt: String
  taxType_lte: String
  taxType_gt: String
  taxType_gte: String
  taxType_contains: String
  taxType_not_contains: String
  taxType_starts_with: String
  taxType_not_starts_with: String
  taxType_ends_with: String
  taxType_not_ends_with: String
  taxPercentage: Float
  taxPercentage_not: Float
  taxPercentage_in: [Float!]
  taxPercentage_not_in: [Float!]
  taxPercentage_lt: Float
  taxPercentage_lte: Float
  taxPercentage_gt: Float
  taxPercentage_gte: Float
  AND: [TaxWhereInput!]
  OR: [TaxWhereInput!]
  NOT: [TaxWhereInput!]
}

input TaxWhereUniqueInput {
  id: Int
}
`